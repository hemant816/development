"""
Search API views
"""
import math
import json
import django
import urllib
import logging
from opaque_keys.edx.keys import CourseKey
from rest_framework import status
from rest_framework.response import Response
from rest_framework.views import APIView
from util.course import get_encoded_course_sharing_utm_params, get_link_for_about_page
from django.utils.translation import ugettext_lazy as _
from django.conf import settings
from django.urls import reverse
from django.http import JsonResponse
from django.contrib.auth.models import User
from search.api import course_discovery_search, course_discovery_filter_fields
from openedx.core.lib.api.view_utils import DeveloperErrorViewMixin, view_auth_classes
from lms.djangoapps.certificates.api import certificate_downloadable_status
from student.models import CourseEnrollment, User
from courseware.access import has_access
from openedx.core.djangoapps.content.course_overviews.models import CourseOverview
from lms.djangoapps.specialization.models import categories


@view_auth_classes(is_authenticated=False)
class CourseSearchView(DeveloperErrorViewMixin, APIView):

    def get(self, request, **kwargs):
        """
        Implements the GET method as described in the class docstring.
        """
        search_key = request.GET.get('search_key')
        user_id = request.GET.get('user_id')
        size = 20
        search_url = request.build_absolute_uri(reverse('subjects'))
        if 'page' in request.GET:
            page = int(request.GET.get('page'))
        else:
            page = 0

        course_category = request.GET.get('course_category')

        if course_category:
            logging.info("Discovery category search request")

            def _process_field_values(request):
                """ Create separate dictionary of supported filter values provided """
                return {
                    field_key: request.GET[field_key]
                    for field_key in request.GET
                    if field_key in course_discovery_filter_fields()
                }

            field_dictionary = _process_field_values(request)

            results = course_discovery_search(
                search_term=search_key,
                size=size,
                from_=0,
                field_dictionary=field_dictionary,
            )
        else:
            logging.info("Discovery course search request")

            def _process_field_values(request):
                """ Create separate dictionary of supported filter values provided """
                return {
                    field_key: request.POST[field_key]
                    for field_key in request.POST
                    if field_key in course_discovery_filter_fields()
                }

            field_dictionary = _process_field_values(request)

            results = course_discovery_search(
                search_term=search_key,
                size=size,
                from_=0,
                field_dictionary=field_dictionary,
            )
        if results.get('total'):
            logging.info("for search api have results")
            result = []
            for course in results.get('results'):
                search_course = {}
                course_id = course.get('_id')
                logging.info("finding response for [%s]" ,course_id)
                course_key = CourseKey.from_string(course_id)
                course_overview = CourseOverview.objects.get(id=course_key)
                search_course['id'] = course_id
                search_course["media"] = {
                    "course_image": {"uri": course_overview.course_image_url},
                    "course_video": {"uri": course_overview.course_video_url}
                }
                search_course['name'] = course_overview.display_name
                search_course['number'] = course_overview.number
                search_course['org'] = course_overview.org
                search_course['start_display'] = course_overview.start_display
                search_course['start_type'] = course_overview.start_type
                search_course[
                    'short_description'] = course_overview.short_description
                search_course['pacing'] = course_overview.pacing
                search_course[
                    'mobile_available'] = course_overview.mobile_available
                search_course[
                    'invitation_only'] = course_overview.invitation_only
                search_course['start'] = course_overview.start.strftime(
                    "%Y-%m-%dT%H:%M:%S.%fZ") if course_overview.start else course_overview.start
                search_course['end'] = course_overview.end.strftime(
                    "%Y-%m-%dT%H:%M:%S.%fZ") if course_overview.end else course_overview.end
                catalog_visibility = course_overview.catalog_visibility
                if catalog_visibility in ['about', 'none']:
                    hidden = True
                else:
                    hidden = False
                search_course['hidden'] = hidden
                base_url = '?'.join([
                    reverse('blocks_in_course'),
                    urllib.urlencode({'course_id': course_id}),
                ])
                block_url = self.request.build_absolute_uri(base_url)
                search_course['blocks_url'] = block_url
                search_course['course_id'] = course_id
                del course['data']
                logging.info("succesfully find response for [%s]" ,course_id)
                result.append(search_course)
            results['results'] = result
            page = page + 1
            if page > 1:
                pages = page - 2
                previous = settings.LMS_ROOT_URL + "/api/v1/course/search/discovery/?search_key={search_key}&user_id={user_id}&page={page}".format(
                    search_key=search_key, user_id=user_id, page=pages)
            else:
                previous = ""
            if results.get('total') > page * size:
                results['pagination'] = {
                    "count": results.get('total'),
                    "previous": previous,
                    "num_pages": math.ceil(results.get('total') / float(size)),
                    "next": settings.LMS_ROOT_URL + "/api/v1/course/search/discovery/?search_key={search_key}&user_id={user_id}&page={page}".format(search_key=search_key, user_id=user_id, page=page)
                }
            else:
                results['pagination'] = {
                    "count": results.get('total'),
                    "previous": previous,
                    "num_pages": math.ceil(results.get('total') / float(size)),
                    "next": ""
                }
            response = JsonResponse(results, status=200)
            return response
        else:
            res = {}
            res['pagination'] = {
                "count": 0,
                "previous": "",
                "num_pages": 0,
                "next": ""
            }
            res['facets'] = {}
            res['results'] = []
            res['total'] = 0
            res['max_score'] = 0
            response = JsonResponse(res, status=200)
            return response


@view_auth_classes(is_authenticated=False)
class CourseCategoryView(DeveloperErrorViewMixin, APIView):

    def get(self, request, **kwargs):

        category_list = []
        category_dict = {}
        search_key = request.GET.get('search_key')
        user_id = request.GET.get('user_id')
        size = 200
        search_url = request.build_absolute_uri(reverse('course_discovery'))

        if search_key:
            def _process_field_values(request):
                """ Create separate dictionary of supported filter values provided """
                return {
                    field_key: request.POST[field_key]
                    for field_key in request.POST
                    if field_key in course_discovery_filter_fields()
                }

            field_dictionary = _process_field_values(request)

            results = course_discovery_search(
                search_term=search_key,
                size=200,
                from_=0,
                field_dictionary=field_dictionary,
            )
            if results.get('total'):
                category_lists = results.get('facets').get(
                    'course_category').get('terms').keys()
                if category_lists:
                    course_category_list = []
                    for category in category_lists:
                        category_dict = {}
                        category_obj = categories.objects.filter(
                            topic_name=category)
                        if category_obj.exists():
                            category_obj = category_obj[0]
                            category_dict['id'] = category_obj.id
                            category_dict['name'] = category_obj.topic_name
                            course_category_list.append(category_dict)
                    if course_category_list:
                        return JsonResponse({'success': True, 'categories_list': course_category_list})
                    else:
                        category_list = []
                        category_obj = categories.objects.all()
                        for category_obj in category_obj:
                            category_dict = {}
                            category_dict['id'] = category_obj.id
                            category_dict['name'] = category_obj.topic_name

                            category_list.append(category_dict)
                        return JsonResponse({'success': True, 'categories_list': category_list})
                else:
                    category_list = []
                    category_obj = categories.objects.all()
                    for category_obj in category_obj:
                        category_dict = {}
                        category_dict['id'] = category_obj.id
                        category_dict['name'] = category_obj.topic_name
                    category_list.append(category_dict)
                    return JsonResponse({'success': True, 'categories_list': category_list})

            else:
                category_list = []
                category_obj = categories.objects.all()
                for category_obj in category_obj:
                    category_dict = {}
                    category_dict['id'] = category_obj.id
                    category_dict['name'] = category_obj.topic_name

                    category_list.append(category_dict)
                return JsonResponse({'success': True, 'categories_list': category_list})
        else:
            category_list = []
            category_obj = categories.objects.all()
            for category_obj in category_obj:
                category_dict = {}
                category_dict['id'] = category_obj.id
                category_dict['name'] = category_obj.topic_name

                category_list.append(category_dict)
            return JsonResponse({'success': True, 'categories_list': category_list})


@view_auth_classes(is_authenticated=False)
class CourseSearchEnrollmentView(DeveloperErrorViewMixin, APIView):

    def get(self, request, **kwargs):
        """
        Implements the GET method as described in the class docstring.
        """
        from rest_framework.reverse import reverse
        params = request.GET
        search_key = request.GET.get('search_key')
        course_category = request.GET.get('course_category')
        user_id = request.GET.get('user_id')
        size = 2000
        search_url = request.build_absolute_uri(reverse('course_discovery'))
        if course_category:
            def _process_field_values(request):
                """ Create separate dictionary of supported filter values provided """
                return {
                    field_key: request.GET[field_key]
                    for field_key in request.GET
                    if field_key in course_discovery_filter_fields()
                }

            field_dictionary = _process_field_values(request)

            results = course_discovery_search(
                search_term=search_key,
                size=size,
                from_=0,
                field_dictionary=field_dictionary,
            )
        else:
            def _process_field_values(request):
                """ Create separate dictionary of supported filter values provided """
                return {
                    field_key: request.POST[field_key]
                    for field_key in request.POST
                    if field_key in course_discovery_filter_fields()
                }

            field_dictionary = _process_field_values(request)

            results = course_discovery_search(
                search_term=search_key,
                size=size,
                from_=0,
                field_dictionary=field_dictionary,
            )
        if results.get('total'):
            result = []
            course_search_enroll = []
            for course in results.get('results'):
                search_course = {}
                course_id = course.get('_id')
                course_key = CourseKey.from_string(course_id)
                course_enroll = CourseEnrollment.objects.filter(
                    course_id=course_key, user_id=user_id, is_active=True)
                course_overview = CourseOverview.objects.get(id=course_key)
                if course_enroll.exists():
                    course_enroll = course_enroll[0]
                    try:
                        user = User.objects.get(id=user_id)
                    except:
                        message = {
                            "error": _('Does not match user for "{user_id}"').format(user_id=user_id)
                        }
                        response = JsonResponse(
                            {'status': 'false', 'message': message}, status=400)
                        return response
                    search_course['mode'] = course_enroll.mode
                    search_course['is_active'] = course_enroll.is_active
                    created = course_enroll.created
                    created = created.strftime("%Y-%m-%dT%H:%M:%S.%fZ")
                    search_course['created'] = created
                    certificate_info = certificate_downloadable_status(
                        user, course_key)
                    if certificate_info['is_downloadable']:
                        certificates = {
                            'url': request.build_absolute_uri(
                                certificate_info['download_url']
                            ),
                        }
                    else:
                        certificates = {}
                    search_course['certificate'] = certificates
                    start_date = course_overview.start
                    start = start_date.strftime("%Y-%m-%dT%H:%M:%S.%fZ")
                    end_date = course_overview.end
                    if end_date:
                        end_date = end_date.strftime("%Y-%m-%dT%H:%M:%S.%fZ")
                    search_course['course'] = {
                        'id': course_id,
                        'number': course_overview.display_number_with_default,
                        'name': course_overview.display_name,
                        'org': course_overview.display_org_with_default,

                        # dates
                        'start': start,
                        'start_display': course_overview.start_display,
                        'start_type': course_overview.start_type,
                        'end': end_date,
                        # notification info
                        'subscription_id': course_overview.clean_id(padding_char='_'),

                        # access info
                        'courseware_access': has_access(
                            user,
                            'load_mobile',
                            course_overview
                        ).to_json(),

                        # various URLs
                        # course_image is sent in both new and old formats
                        # (within media to be compatible with the new Course API)
                        'media': {
                            'course_image': {
                                'uri': course_overview.course_image_url,
                                'name': 'Course Image',
                            }
                        },
                        'course_image': course_overview.course_image_url,
                        'course_about': get_link_for_about_page(course_overview),
                        'course_sharing_utm_parameters': get_encoded_course_sharing_utm_params(),
                        'course_updates': reverse(
                            'course-updates-list',
                            kwargs={'course_id': course_id},
                            request=request,
                        ),
                        'course_handouts': reverse(
                            'course-handouts-list',
                            kwargs={'course_id': course_id},
                            request=request,
                        ),
                        'discussion_url': reverse(
                            'discussion_course',
                            kwargs={'course_id': course_id},
                            request=request,
                        ) if course_overview.is_discussion_tab_enabled() else None,

                        'video_outline': reverse(
                            'video-summary-list',
                            kwargs={'course_id': course_id},
                            request=request,
                        )}
                    course_search_enroll.append(search_course)
            if not course_search_enroll:
                course_search_enroll = []
                return JsonResponse(course_search_enroll, status=200, safe=False)
            return JsonResponse(course_search_enroll, status=200, safe=False)
        else:
            course_search_enroll = []
            return JsonResponse(course_search_enroll, status=200, safe=False)

